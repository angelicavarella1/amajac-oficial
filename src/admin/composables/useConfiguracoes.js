// useConfiguracoes.js
import { createClient } from '@supabase/supabase-js'
import { useAuthStore } from '@/stores/auth'

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY

export const supabase = createClient(supabaseUrl, supabaseAnonKey)

export const useConfiguracoes = () => {
  const authStore = useAuthStore()

  const carregarConfiguracoes = async () => {
    try {
      console.log('üîÑ Iniciando carregamento de configura√ß√µes...')

      const { data, error } = await supabase
        .from('configuracoes')
        .select('*')
        .order('chave')

      if (error) {
        console.error('‚ùå Erro ao carregar configura√ß√µes:', error)
        throw error
      }

      console.log(`‚úÖ ${data?.length || 0} configura√ß√µes carregadas do banco`)
      return data || []
    } catch (error) {
      console.error('‚ùå Erro no carregamento de configura√ß√µes:', error)
      throw error
    }
  }

  // NOVA FUN√á√ÉO CORRIGIDA
  const atualizarConfiguracao = async (chave, valor) => {
    try {
      console.log('üíæ Tentando atualizar configura√ß√£o:', chave, '=', valor)

      // 1. Primeiro, tenta atualizar a linha existente
      const { data: updateData, error: updateError, count } = await supabase
        .from('configuracoes')
        .update({ valor: valor, updated_at: new Date().toISOString() })
        .eq('chave', chave) // Filtra pela chave √∫nica
        .select() // Retorna os dados da linha atualizada
        .single() // Espera um √∫nico resultado (ou null se n√£o encontrado)

      if (updateError) {
        // Se o erro for "0 rows" (n√£o encontrou para atualizar), tenta inserir
        if (updateError.code === 'PGRST116') { // C√≥digo espec√≠fico para "0 rows" no update do Supabase
          console.log(`üìù Chave '${chave}' n√£o encontrada, tentando inserir...`)
        } else {
          // Se for outro erro de update, lan√ßa
          console.error('‚ùå Erro ao atualizar configura√ß√£o:', updateError)
          throw new Error(`Erro ao atualizar: ${updateError.message}`)
        }
      } else if (updateData) {
        // Se a atualiza√ß√£o funcionou (retornou dados), sucesso!
        console.log('‚úÖ Configura√ß√£o atualizada com sucesso:', updateData)
        return updateData
      }

      // 2. Se a atualiza√ß√£o n√£o encontrou a linha (count = 0), tenta inserir
      const { data: insertData, error: insertError } = await supabase
        .from('configuracoes')
        .insert([{ chave: chave, valor: valor, updated_at: new Date().toISOString() }])
        .select()
        .single()

      if (insertError) {
        // Se o insert falhar, provavelmente √© por viola√ß√£o de constraint UNIQUE
        // Ou por alguma condi√ß√£o na pol√≠tica RLS
        console.error('‚ùå Erro ao inserir configura√ß√£o (ou viola√ß√£o de UNIQUE):', insertError)
        // Pode ser necess√°rio verificar se a chave j√° existe de fato antes de lan√ßar
        const { data: checkData } = await supabase
          .from('configuracoes')
          .select('id')
          .eq('chave', chave)
          .limit(1)

        if (checkData && checkData.length > 0) {
           console.error(`‚ö†Ô∏è A chave '${chave}' j√° existe com ID ${checkData[0].id}, mas o update falhou. Verifique RLS ou dados.`)
        }
        throw new Error(`Erro ao inserir: ${insertError.message}`)
      }

      console.log('‚úÖ Configura√ß√£o inserida com sucesso:', insertData)
      return insertData

    } catch (error) {
      console.error('‚ùå Erro GERAL ao atualizar configura√ß√£o:', error)
      throw error
    }
  }


  // ... (restante das fun√ß√µes permanecem iguais)
  const carregarConfiguracoesAgrupadas = async () => {
    try {
      const configuracoes = await carregarConfiguracoes()

      // Agrupar configura√ß√µes por categoria
      const agrupadas = {
        site: {},
        contato: {},
        hero: {},
        about: {},
        sistema: {}
      }

      configuracoes.forEach(config => {
        const { chave, valor } = config

        // Mapeamento das chaves para categorias
        if (chave.startsWith('site_')) {
          agrupadas.site[chave.replace('site_', '')] = valor
        } else if (chave.startsWith('email_') || chave.startsWith('telefone_') ||
                   chave.startsWith('endereco') || chave.startsWith('contato_')) {
          agrupadas.contato[chave] = valor
        } else if (chave.startsWith('hero_')) {
          agrupadas.hero[chave.replace('hero_', '')] = valor
        } else if (chave.startsWith('quem_somos_')) {
          agrupadas.about[chave.replace('quem_somos_', '')] = valor
        } else if (chave.startsWith('info_')) {
          agrupadas.sistema[chave] = valor
        } else {
          // Configura√ß√µes gerais v√£o para sistema
          agrupadas.sistema[chave] = valor
        }
      })

      console.log('‚úÖ Configura√ß√µes mapeadas:', agrupadas)
      return agrupadas
    } catch (error) {
      console.error('‚ùå Erro ao agrupar configura√ß√µes:', error)
      throw error
    }
  }

  const salvarMultiplasConfiguracoes = async (configuracoes) => {
    try {
      console.log('üìù Salvando m√∫ltiplas configura√ß√µes...')

      const resultados = []

      for (const [chave, valor] of Object.entries(configuracoes)) {
        try {
          const resultado = await atualizarConfiguracao(chave, valor)
          resultados.push({ chave, sucesso: true, data: resultado })
        } catch (error) {
          console.error(`‚ùå Erro ao salvar ${chave}:`, error)
          resultados.push({ chave, sucesso: false, error: error.message })
          // Continua salvando as outras mesmo se uma falhar
        }
      }

      console.log('‚úÖ Processamento de configura√ß√µes conclu√≠do')
      return resultados
    } catch (error) {
      console.error('‚ùå Erro ao salvar m√∫ltiplas configura√ß√µes:', error)
      throw error
    }
  }

  const uploadImagem = async (file, pasta = 'geral') => {
    try {
      console.log('üì§ Iniciando upload de imagem...')

      if (!file) {
        throw new Error('Nenhum arquivo selecionado')
      }

      // Gerar nome √∫nico para o arquivo
      const timestamp = Date.now()
      const extensao = file.name.split('.').pop()
      const nomeArquivo = `${timestamp}-${Math.random().toString(36).substring(2, 8)}.${extensao}`
      const caminho = `${pasta}/${nomeArquivo}`

      console.log('üìÅ Fazendo upload para:', caminho)

      const { data, error } = await supabase.storage
        .from('imagens')
        .upload(caminho, file, {
          cacheControl: '3600',
          upsert: false
        })

      if (error) {
        console.error('‚ùå Erro no upload:', error)
        throw error
      }

      // Obter URL p√∫blica
      const { data: urlData } = supabase.storage
        .from('imagens')
        .getPublicUrl(caminho)

      console.log('‚úÖ Upload conclu√≠do:', urlData.publicUrl)
      return urlData.publicUrl
    } catch (error) {
      console.error('‚ùå Erro no upload de imagem:', error)
      throw error
    }
  }

  const deletarImagem = async (url) => {
    try {
      console.log('üóëÔ∏è Tentando deletar imagem:', url)

      if (!url) return

      // Extrair o caminho do arquivo da URL
      const caminho = url.split('/imagens/').pop()

      if (!caminho) {
        console.warn('‚ö†Ô∏è URL de imagem inv√°lida')
        return
      }

      const { error } = await supabase.storage
        .from('imagens')
        .remove([caminho])

      if (error) {
        console.error('‚ùå Erro ao deletar imagem:', error)
        throw error
      }

      console.log('‚úÖ Imagem deletada com sucesso')
    } catch (error) {
      console.error('‚ùå Erro ao deletar imagem:', error)
      throw error
    }
  }

  const testarConexao = async () => {
    try {
      console.log('üß™ Testando conex√£o com o banco...')

      const { data, error } = await supabase
        .from('configuracoes')
        .select('count')
        .limit(1)

      if (error) {
        console.error('‚ùå Erro na conex√£o:', error)
        throw error
      }

      console.log('‚úÖ Conex√£o com o banco estabelecida com sucesso')
      return true
    } catch (error) {
      console.error('‚ùå Falha no teste de conex√£o:', error)
      throw error
    }
  }

  return {
    // Opera√ß√µes b√°sicas
    carregarConfiguracoes,
    atualizarConfiguracao,
    carregarConfiguracoesAgrupadas,
    salvarMultiplasConfiguracoes,

    // Gerenciamento de imagens
    uploadImagem,
    deletarImagem,

    // Utilit√°rios
    testarConexao,

    // Inst√¢ncia do Supabase (para casos espec√≠ficos)
    supabase
  }
}

export default useConfiguracoes