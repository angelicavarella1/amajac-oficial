// src/admin/composables/useNoticias.js
import { ref } from 'vue'
import { adminApi } from '@/supabase/admin' // Importa√ß√£o correta: adminApi
import { useUIStore } from '@/stores/ui'

export function useNoticias() {
  const uiStore = useUIStore()
  const noticias = ref([])
  const noticia = ref(null) // Para armazenar uma not√≠cia individual (detalhe)
  const loading = ref(false)
  const error = ref(null)

  // üî• CARREGAR NOT√çCIAS (Renomeado para fetchNoticias para consist√™ncia com o store)
  const fetchNoticias = async (forceRefresh = false) => {
    loading.value = true
    error.value = null
    try {
      console.log('üì∞ Carregando not√≠cias do banco...')

      // üîß CHAMADA REAL PARA O SUPABASE VIA adminApi
      const dados = await adminApi.noticias.getAll()

      noticias.value = dados
      console.log(`‚úÖ ${dados.length} not√≠cias carregadas`)
      return dados
    } catch (err) {
      console.error('‚ùå Erro ao carregar not√≠cias:', err)
      error.value = err.message
      uiStore.showToast('Erro ao carregar not√≠cias', 'error')
      return []
    } finally {
      loading.value = false
    }
  }

  // üî• CARREGAR NOT√çCIA POR ID (Renomeado de fetchNoticia para carregarNoticiaPorId)
  const carregarNoticiaPorId = async (id) => {
    loading.value = true
    error.value = null
    try {
      console.log(`üîç Buscando not√≠cia com ID: ${id}`)

      // üîß CHAMADA REAL PARA O SUPABASE VIA adminApi
      const noticiaEncontrada = await adminApi.noticias.getById(id)

      if (!noticiaEncontrada) {
        throw new Error('Not√≠cia n√£o encontrada')
      }

      noticia.value = noticiaEncontrada
      console.log('‚úÖ Not√≠cia carregada:', noticiaEncontrada)
      return noticiaEncontrada
    } catch (err) {
      console.error('‚ùå Erro ao carregar not√≠cia:', err)
      error.value = err.message
      uiStore.showToast('Erro ao carregar not√≠cia', 'error')
      return null
    } finally {
      loading.value = false
    }
  }

  // üî• CRIAR NOT√çCIA
  const criarNoticia = async (noticiaData) => {
    loading.value = true
    error.value = null
    try {
      console.log('üìù Criando nova not√≠cia...')

      // üîß CHAMADA REAL PARA O SUPABASE VIA adminApi
      const novaNoticia = await adminApi.noticias.create(noticiaData)

      // Atualizar cache local
      noticias.value.unshift(novaNoticia)
      uiStore.showToast('Not√≠cia criada com sucesso!', 'success')
      return novaNoticia
    } catch (err) {
      console.error('‚ùå Erro ao criar not√≠cia:', err)
      error.value = err.message
      uiStore.showToast('Erro ao criar not√≠cia', 'error')
      throw err // Re-lan√ßa para o componente tratar
    } finally {
      loading.value = false
    }
  }

  // üî• ATUALIZAR NOT√çCIA
  const atualizarNoticia = async (id, noticiaData) => {
    loading.value = true
    error.value = null
    try {
      console.log(`‚úèÔ∏è Atualizando not√≠cia com ID: ${id}`)

      // üîß CHAMADA REAL PARA O SUPABASE VIA adminApi
      const noticiaAtualizada = await adminApi.noticias.update(id, noticiaData)

      // Atualizar cache local
      const index = noticias.value.findIndex(n => n.id === id)
      if (index !== -1) {
        noticias.value[index] = noticiaAtualizada
      }

      // Atualizar not√≠cia individual se for a mesma sendo editada
      if (noticia.value && noticia.value.id === id) {
        noticia.value = noticiaAtualizada
      }

      uiStore.showToast('Not√≠cia atualizada com sucesso!', 'success')
      return noticiaAtualizada
    } catch (err) {
      console.error('‚ùå Erro ao atualizar not√≠cia:', err)
      error.value = err.message
      uiStore.showToast('Erro ao atualizar not√≠cia', 'error')
      throw err // Re-lan√ßa para o componente tratar
    } finally {
      loading.value = false
    }
  }

  // üî• DELETAR NOT√çCIA
  const deletarNoticia = async (id) => {
    loading.value = true
    error.value = null
    try {
      console.log(`üóëÔ∏è Deletando not√≠cia com ID: ${id}`)

      // üîß CHAMADA REAL PARA O SUPABASE VIA adminApi
      await adminApi.noticias.delete(id)

      // Atualizar cache local
      noticias.value = noticias.value.filter(n => n.id !== id)

      // Limpar not√≠cia individual se for a mesma sendo deletada
      if (noticia.value && noticia.value.id === id) {
        noticia.value = null
      }

      uiStore.showToast('Not√≠cia exclu√≠da com sucesso!', 'success')
      return true
    } catch (err) {
      console.error('‚ùå Erro ao excluir not√≠cia:', err)
      error.value = err.message
      uiStore.showToast('Erro ao excluir not√≠cia', 'error')
      throw err // Re-lan√ßa para o componente tratar
    } finally {
      loading.value = false
    }
  }

  // üî• ALTERAR STATUS (Ativo/Inativo)
  const alterarStatusNoticia = async (id, ativo) => {
    try {
      console.log(`üîÑ Alterando status da not√≠cia ${id} para ${ativo ? 'ativo' : 'inativo'}`)
      // Supondo que adminApi.noticias.update tamb√©m atualize o campo 'ativo'
      const noticiaAtualizada = await atualizarNoticia(id, { ativo })
      return noticiaAtualizada
    } catch (err) {
      console.error(`‚ùå Erro ao alterar status da not√≠cia ${id}:`, err)
      throw err
    }
  }

  // üî• ALTERAR DESTAQUE
  const alterarDestaqueNoticia = async (id, destaque) => {
    try {
      console.log(`‚≠ê Alterando destaque da not√≠cia ${id} para ${destaque ? 'destaque' : 'n√£o destaque'}`)
      // Supondo que adminApi.noticias.update tamb√©m atualize o campo 'destaque'
      const noticiaAtualizada = await atualizarNoticia(id, { destaque })
      return noticiaAtualizada
    } catch (err) {
      console.error(`‚ùå Erro ao alterar destaque da not√≠cia ${id}:`, err)
      throw err
    }
  }

  return {
    // Estado
    noticias,
    noticia, // Adicionado
    loading,
    error,
    // A√ß√µes
    fetchNoticias, // Renomeado
    carregarNoticiaPorId, // Renomeado
    criarNoticia, // Renomeado
    atualizarNoticia, // Renomeado
    deletarNoticia, // Renomeado
    alterarStatusNoticia,
    alterarDestaqueNoticia // Adicionado
  }
}